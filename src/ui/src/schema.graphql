schema {
  query: Query
  mutation: Mutation
}

type Movie {
  title: String
  simpleTitle: String
  rating: String
  releaseDate: DateTime
  runtime: String
  genre: String
  director: String
  writer: String
  actors: String
  plot: String
  posterLink: String
  imdbRating: Decimal
  imdbID: String
  tomatoRating: Int
  uploadedDate: DateTime
  removeFromRandom: Boolean!
  id: Int!
  viewings: [Viewing!]!
}

type Mutation {
  runEmptyTest: Boolean!
}

type Query {
  movies(where: MovieFilterInput order: [MovieSortInput!]): [Movie]
  randomMovies(take: Int! = 50): [Movie]
}

type User {
  userID: Int!
  username: String
}

type Viewing {
  viewingID: Int!
  movieID: Int!
  movie: Movie!
  userID: Int!
  user: User!
  viewingType: String
  viewingData: String
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfViewingFilterInput {
  all: ViewingFilterInput
  none: ViewingFilterInput
  some: ViewingFilterInput
  any: Boolean
}

input MovieFilterInput {
  and: [MovieFilterInput!]
  or: [MovieFilterInput!]
  title: StringOperationFilterInput
  simpleTitle: StringOperationFilterInput
  rating: StringOperationFilterInput
  releaseDate: DateTimeOperationFilterInput
  runtime: StringOperationFilterInput
  genre: StringOperationFilterInput
  director: StringOperationFilterInput
  writer: StringOperationFilterInput
  actors: StringOperationFilterInput
  plot: StringOperationFilterInput
  posterLink: StringOperationFilterInput
  imdbRating: DecimalOperationFilterInput
  imdbID: StringOperationFilterInput
  tomatoRating: IntOperationFilterInput
  uploadedDate: DateTimeOperationFilterInput
  removeFromRandom: BooleanOperationFilterInput
  id: IntOperationFilterInput
  viewings: ListFilterInputTypeOfViewingFilterInput
}

input MovieSortInput {
  title: SortEnumType
  simpleTitle: SortEnumType
  rating: SortEnumType
  releaseDate: SortEnumType
  runtime: SortEnumType
  genre: SortEnumType
  director: SortEnumType
  writer: SortEnumType
  actors: SortEnumType
  plot: SortEnumType
  posterLink: SortEnumType
  imdbRating: SortEnumType
  imdbID: SortEnumType
  tomatoRating: SortEnumType
  uploadedDate: SortEnumType
  removeFromRandom: SortEnumType
  id: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  userID: IntOperationFilterInput
  username: StringOperationFilterInput
}

input ViewingFilterInput {
  and: [ViewingFilterInput!]
  or: [ViewingFilterInput!]
  viewingID: IntOperationFilterInput
  movieID: IntOperationFilterInput
  movie: MovieFilterInput
  userID: IntOperationFilterInput
  user: UserFilterInput
  viewingType: StringOperationFilterInput
  viewingData: StringOperationFilterInput
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum SortEnumType {
  ASC
  DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal